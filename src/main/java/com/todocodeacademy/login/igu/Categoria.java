
package com.todocodeacademy.login.igu;

import com.todocodeacademy.login.logica.Categorias;
import com.todocodeacademy.login.logica.Controladora;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Claudio De Jesus
 */
public class Categoria extends javax.swing.JFrame {

    /**
     * Creates new form Categoria
     */
    Controladora control;
     int id_categoria;
     Categorias cat;
     
    public Categoria(Controladora control) {
        initComponents();
        this.control = control;
        configurarListeners();
    }
    
private void configurarListeners() {
    tblCategoria.getSelectionModel().addListSelectionListener(e -> {
        if (!e.getValueIsAdjusting()) { // Aseguramos que no sea un cambio intermedio
            cargarDatosDesdeTablaCategoria();
        }
    });
 
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtBuscar = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtNombreCategoria = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDescripcionCategoria = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCategoria = new javax.swing.JTable();
        btnBuscarCategoria = new javax.swing.JButton();
        btnGuardarCategoria = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnEditarC = new javax.swing.JButton();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(204, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(204, 204, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Verdana", 1, 36)); // NOI18N
        jLabel1.setText("CATEGORIA");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 10, -1, -1));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 670, 70));

        jLabel2.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel2.setText("ID:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, -1, -1));

        txtBuscar.setEditable(false);
        txtBuscar.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        txtBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBuscarActionPerformed(evt);
            }
        });
        jPanel1.add(txtBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 90, 180, 30));

        jLabel3.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel3.setText("Nombre:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, -1, -1));

        txtNombreCategoria.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jPanel1.add(txtNombreCategoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 140, 180, 30));

        jLabel4.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel4.setText("Descripción:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, -1, -1));

        txtDescripcionCategoria.setColumns(20);
        txtDescripcionCategoria.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        txtDescripcionCategoria.setRows(5);
        jScrollPane1.setViewportView(txtDescripcionCategoria);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 190, -1, -1));

        tblCategoria.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblCategoria);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 330, 560, 190));

        btnBuscarCategoria.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        btnBuscarCategoria.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/001-buscar.png"))); // NOI18N
        btnBuscarCategoria.setText("Buscar");
        btnBuscarCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarCategoriaActionPerformed(evt);
            }
        });
        jPanel1.add(btnBuscarCategoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 140, 160, -1));

        btnGuardarCategoria.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        btnGuardarCategoria.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/005-agregar-producto.png"))); // NOI18N
        btnGuardarCategoria.setText("Guardar");
        btnGuardarCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarCategoriaActionPerformed(evt);
            }
        });
        jPanel1.add(btnGuardarCategoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 80, 160, -1));

        btnEliminar.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/001-borrar-1.png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        jPanel1.add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 260, 160, 40));

        btnEditarC.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        btnEditarC.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/006-editar.png"))); // NOI18N
        btnEditarC.setText("Editar");
        btnEditarC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarCActionPerformed(evt);
            }
        });
        jPanel1.add(btnEditarC, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 200, 160, 40));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 561, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarCategoriaActionPerformed
         // Obtener el texto ingresado en el campo de búsqueda
    String textoBusqueda = txtNombreCategoria.getText().trim();

    // Validar que el campo no esté vacío
    if (textoBusqueda.isEmpty()) {
        mostrarMensaje("Por favor, ingrese un nombre para buscar", "Error", "Campo vacío");
        return;
    }

    // Buscar las categorías que coincidan con el texto ingresado
    List<Categorias> listaCategorias = control.TraerCategoria();
    List<Categorias> categoriasFiltradas = new ArrayList<>();

    for (Categorias cat : listaCategorias) {
        if (cat.getNombre().toLowerCase().contains(textoBusqueda.toLowerCase())) {
            categoriasFiltradas.add(cat);
        }
    }

    // Mostrar las categorías filtradas en la tabla
    if (!categoriasFiltradas.isEmpty()) {
        actualizarTablaCategorias(categoriasFiltradas);
    } else {
        mostrarMensaje("No se encontraron categorías con ese nombre", "Info", "Búsqueda sin resultados");
        cargarTablaCategorias(); // Recargar todas las categorías si no hay coincidencias
    }
    }//GEN-LAST:event_btnBuscarCategoriaActionPerformed

    private void btnGuardarCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarCategoriaActionPerformed
        String nombre = txtNombreCategoria.getText();
        String descripcion = txtDescripcionCategoria.getText();
 

   
        control.crearCategoria(nombre, descripcion);
        mostrarMensaje("Categoria creado correctamente", "Info", "Creacion exitosa");
         cargarTablaCategorias();
    }//GEN-LAST:event_btnGuardarCategoriaActionPerformed

    private void txtBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBuscarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBuscarActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        cargarTablaCategorias();
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
   
        
    }//GEN-LAST:event_formWindowClosed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
          // Verificar si la tabla tiene filas
    if (tblCategoria.getRowCount() > 0) {
        // Verificar si hay una fila seleccionada
        if (tblCategoria.getSelectedRow() != -1) {
            // Obtener el ID de la categoría seleccionada
            int idCategoria = (int) tblCategoria.getValueAt(tblCategoria.getSelectedRow(), 0);

            // Confirmar con el usuario antes de eliminar
            int confirmacion = JOptionPane.showConfirmDialog(
                this,
                "¿Estás seguro de que deseas eliminar esta categoría?",
                "Confirmar eliminación",
                JOptionPane.YES_NO_OPTION
            );

            if (confirmacion == JOptionPane.YES_OPTION) {
                // Llamar al método para eliminar la categoría
                control.borrarCategoria(idCategoria);

                // Mostrar mensaje de éxito
                mostrarMensaje("Categoría eliminada correctamente", "Info", "Eliminación exitosa");

                // Recargar la tabla para reflejar los cambios
                cargarTablaCategorias();
            }
        } else {
            // Mostrar mensaje si no se seleccionó ninguna fila
            mostrarMensaje("No seleccionaste ninguna categoría", "Error", "Error de selección");
        }
    } else {
        // Mostrar mensaje si la tabla está vacía
        mostrarMensaje("No hay categorías para eliminar", "Error", "Error de tabla vacía");
    }
        
        
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnEditarCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarCActionPerformed
         // Verificar si hay una fila seleccionada en la tabla
    int filaSeleccionada = tblCategoria.getSelectedRow();

    if (filaSeleccionada == -1) {
        mostrarMensaje("Debe seleccionar una categoría para editar", "Error", "Selección requerida");
        return;
    }

    // Obtener el ID de la categoría seleccionada
    int idCategoria = (int) tblCategoria.getValueAt(filaSeleccionada, 0);

    // Cargar la categoría desde la base de datos
    Categorias categoriaSeleccionada = control.traerCategorias(idCategoria);
    if (categoriaSeleccionada == null) {
        mostrarMensaje("No se pudo cargar la categoría seleccionada", "Error", "Error al cargar datos");
        return;
    }

    // Obtener los datos de los campos de texto
    String nuevoNombre = txtNombreCategoria.getText().trim();
    String nuevaDescripcion = txtDescripcionCategoria.getText().trim();

    // Validar que los campos no estén vacíos
    if (nuevoNombre.isEmpty() || nuevaDescripcion.isEmpty()) {
        mostrarMensaje("Todos los campos son obligatorios", "Error", "Campos incompletos");
        return;
    }

    // Actualizar los valores de la categoría
    control.editarCategoria(categoriaSeleccionada, nuevoNombre, nuevaDescripcion);

    // Mostrar mensaje de éxito
    mostrarMensaje("Categoría actualizada correctamente", "Info", "Edición exitosa");

    // Recargar la tabla para reflejar los cambios
    cargarTablaCategorias();
        
    }//GEN-LAST:event_btnEditarCActionPerformed
private void cargarTablaCategorias() {
   DefaultTableModel modeloTabla2 = new DefaultTableModel() {

            //Que fila y columnas no sean editable
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
       //establecemos los nombres de las columnas
        String titulo[] = {"Id", "Nombre", "Descripción"};
        modeloTabla2.setColumnIdentifiers(titulo);
        
         //traer de la bd la lista de Usuario
        List<Categorias> listaCategorias = control.TraerCategoria();
        //preguntamos si la lista está vacia
        if (listaCategorias != null) {
            //Recorrer la lista
            for (Categorias cat : listaCategorias) {
                Object[] objeto1 = {cat.getId(),cat.getNombre(),cat.getDescripcion()};

                modeloTabla2.addRow(objeto1);
            }
        }
        tblCategoria.setModel(modeloTabla2);

}


 private void cargarDatosDesdeTablaCategoria() {
    int filaSeleccionada = tblCategoria.getSelectedRow();
    
    if (filaSeleccionada != -1) {
        // Obtener los valores de la fila seleccionada
        int idCategoria = (int) tblCategoria.getValueAt(filaSeleccionada, 0);
        String nombreCategoria = (String) tblCategoria.getValueAt(filaSeleccionada, 1);
        String descripcionCategoria = (String) tblCategoria.getValueAt(filaSeleccionada, 2);

        // Cargar los valores en los campos de texto y combo
        txtNombreCategoria.setText(nombreCategoria);
        txtDescripcionCategoria.setText(descripcionCategoria);
        

        // Puedes almacenar el ID si necesitas usarlo para actualizar
        cat = control.traerCategorias(idCategoria); // Obtener el objeto completo del usuario desde la BD
    }
}

 public void mostrarMensaje(String mensaje, String tipo, String titulo) {
        JOptionPane optionPane = new JOptionPane(mensaje);
        if (tipo.equals("Info")) {
            optionPane.setMessageType(JOptionPane.INFORMATION_MESSAGE);
        } else if (tipo.equals("Error")) {
            optionPane.setMessageType(JOptionPane.INFORMATION_MESSAGE);
        }
        JDialog dialog = optionPane.createDialog(titulo);
        dialog.setAlwaysOnTop(true);
        dialog.setVisible(true);
    
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscarCategoria;
    private javax.swing.JButton btnEditarC;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardarCategoria;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblCategoria;
    private javax.swing.JTextField txtBuscar;
    private javax.swing.JTextArea txtDescripcionCategoria;
    private javax.swing.JTextField txtNombreCategoria;
    // End of variables declaration//GEN-END:variables

  void ActualizarCategoria(){
   int fila = tblCategoria.getSelectedRow(); // Obtenemos la fila seleccionada
        if (fila != -1) {
            // Obtenemos los valores de los campos de texto
            String nombre = txtNombreCategoria.getText();
            String descripcion = txtDescripcionCategoria.getText();
           

            // Actualizamos el cliente
            control.editarCategoria(cat, nombre, descripcion);

            mostrarMensaje("Usuario editado correctamente", "Info", "Actualización exitosa");
        } else {
            mostrarMensaje("No seleccionaste ninguna fila para actualizar", "Error", "Error de actualización");
        }
  }

   private void actualizarTablaCategorias(List<Categorias> categorias) {
    DefaultTableModel modeloTabla = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false; // Evitar que las celdas sean editables
        }
    };

    // Definir las columnas de la tabla
    String[] titulos = {"Id", "Nombre", "Descripción"};
    modeloTabla.setColumnIdentifiers(titulos);

    // Agregar las filas con los datos de las categorías
    for (Categorias cat : categorias) {
        Object[] objeto = {cat.getId(), cat.getNombre(), cat.getDescripcion()};
        modeloTabla.addRow(objeto);
    }

    // Asignar el modelo a la tabla
    tblCategoria.setModel(modeloTabla);
}

}
